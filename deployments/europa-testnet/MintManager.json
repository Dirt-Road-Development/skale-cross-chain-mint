{
  "address": "0x5227adCf5007f2Ec092c422437538000aFa1F94E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_RECIEVER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "crossChainRecievers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "chainNameHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "destinationContractAddress",
          "type": "address"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "chainNameHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "destinationContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "chainNameHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "destinationContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxy",
      "outputs": [
        {
          "internalType": "contract IMessageProxyForSchain",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "chainNameHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newReceiverAddress",
          "type": "address"
        }
      ],
      "name": "setCrossChainReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xae02625862316f5c716d4896bd038afd50aae3fca974f1a5d88a19722547b1c4",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x4caf1ca5B54119696fECB30DE2eb426343D5f773",
    "contractAddress": "0x5227adCf5007f2Ec092c422437538000aFa1F94E",
    "transactionIndex": 0,
    "gasUsed": "1516086",
    "logsBloom": "0x
    "blockHash": "0xd79994d2e0e1ba8480c8bfb51e3307ac6ea86467a786f24d01cab21c62b9a591",
    "transactionHash": "0xae02625862316f5c716d4896bd038afd50aae3fca974f1a5d88a19722547b1c4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3400842,
        "transactionHash": "0xae02625862316f5c716d4896bd038afd50aae3fca974f1a5d88a19722547b1c4",
        "address": "0x5227adCf5007f2Ec092c422437538000aFa1F94E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004caf1ca5b54119696fecb30de2eb426343d5f773",
          "0x0000000000000000000000004caf1ca5b54119696fecb30de2eb426343d5f773"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd79994d2e0e1ba8480c8bfb51e3307ac6ea86467a786f24d01cab21c62b9a591"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3400842,
        "transactionHash": "0xae02625862316f5c716d4896bd038afd50aae3fca974f1a5d88a19722547b1c4",
        "address": "0x5227adCf5007f2Ec092c422437538000aFa1F94E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000004caf1ca5b54119696fecb30de2eb426343d5f773",
          "0x0000000000000000000000004caf1ca5b54119696fecb30de2eb426343d5f773"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xd79994d2e0e1ba8480c8bfb51e3307ac6ea86467a786f24d01cab21c62b9a591"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3400842,
        "transactionHash": "0xae02625862316f5c716d4896bd038afd50aae3fca974f1a5d88a19722547b1c4",
        "address": "0x5227adCf5007f2Ec092c422437538000aFa1F94E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x28ef3adc5b20d69ab84ebe1e2f71d43bc6c9e6acb4a291daa08672fad7942e6c",
          "0x0000000000000000000000004caf1ca5b54119696fecb30de2eb426343d5f773",
          "0x0000000000000000000000004caf1ca5b54119696fecb30de2eb426343d5f773"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xd79994d2e0e1ba8480c8bfb51e3307ac6ea86467a786f24d01cab21c62b9a591"
      }
    ],
    "blockNumber": 3400842,
    "cumulativeGasUsed": "1516086",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3ab2f54f9372a13f23776bc2479b52e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_RECIEVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"crossChainRecievers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"chainNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationContractAddress\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"chainNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"chainNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract IMessageProxyForSchain\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"chainNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newReceiverAddress\",\"type\":\"address\"}],\"name\":\"setCrossChainReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mintTo(address,bytes32,address,uint256,uint256)\":{\"notice\":\"ERC1155 -> Specify How many *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintManager.sol\":\"MintManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@skalenetwork/ima-interfaces/IMessageProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   IMessageProxy.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Dmytro Stebaiev\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\n\\ninterface IMessageProxy {\\n\\n    /**\\n     * @dev Structure that describes message. Should contain sender of message,\\n     * destination contract on schain that will receiver message,\\n     * data that contains all needed info about token or ETH.\\n     */\\n    struct Message {\\n        address sender;\\n        address destinationContract;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Structure that contains fields for bls signature.\\n     */\\n    struct Signature {\\n        uint256[2] blsSignature;\\n        uint256 hashA;\\n        uint256 hashB;\\n        uint256 counter;\\n    }\\n\\n    function addConnectedChain(string calldata schainName) external;\\n    function postIncomingMessages(\\n        string calldata fromSchainName,\\n        uint256 startingCounter,\\n        Message[] calldata messages,\\n        Signature calldata sign\\n    ) external;\\n    function setNewGasLimit(uint256 newGasLimit) external;\\n    function registerExtraContractForAll(address extraContract) external;\\n    function removeExtraContractForAll(address extraContract) external;    \\n    function removeConnectedChain(string memory schainName) external;\\n    function postOutgoingMessage(\\n        bytes32 targetChainHash,\\n        address targetContract,\\n        bytes memory data\\n    ) external;\\n    function registerExtraContract(string memory chainName, address extraContract) external;\\n    function removeExtraContract(string memory schainName, address extraContract) external;\\n    function setVersion(string calldata newVersion) external;\\n    function isContractRegistered(\\n        bytes32 schainHash,\\n        address contractAddress\\n    ) external view returns (bool);\\n    function getContractRegisteredLength(bytes32 schainHash) external view returns (uint256);\\n    function getContractRegisteredRange(\\n        bytes32 schainHash,\\n        uint256 from,\\n        uint256 to\\n    )\\n        external\\n        view\\n        returns (address[] memory);\\n    function getOutgoingMessagesCounter(string calldata targetSchainName) external view returns (uint256);\\n    function getIncomingMessagesCounter(string calldata fromSchainName) external view returns (uint256);\\n    function isConnectedChain(string memory schainName) external view returns (bool);\\n    function getLastOutgoingMessageBlockId(string memory targetSchainName) external view returns (uint);\\n}\",\"keccak256\":\"0x1a7f2b3a3c1a27742e239064741527b7f3a11f8aeb757453160fe4e085ae5831\",\"license\":\"AGPL-3.0-only\"},\"@skalenetwork/ima-interfaces/IMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   IMessageReceiver.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Dmytro Stebaiev\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\n\\ninterface IMessageReceiver {\\n    function postMessage(\\n        bytes32 schainHash,\\n        address sender,\\n        bytes calldata data\\n    )\\n        external;\\n}\",\"keccak256\":\"0x9bd7b06633997c7c7ea0ba8d5b6f01295cbfa4ba10117444c6080ad85280d6fd\",\"license\":\"AGPL-3.0-only\"},\"@skalenetwork/ima-interfaces/schain/IKeyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   IKeyStorage.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Dmytro Stebaiev\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\nimport \\\"./bls/IFieldOperations.sol\\\";\\n\\n\\ninterface IKeyStorage {\\n    function initialize() external;\\n    function getBlsCommonPublicKey() external view returns (IFieldOperations.G2Point memory);\\n}\",\"keccak256\":\"0x7adff976acf5f27d626ae855d9cd47ede84eeaf8f5877e2f3f04ba040ccfa393\",\"license\":\"AGPL-3.0-only\"},\"@skalenetwork/ima-interfaces/schain/IMessageProxyForSchain.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   IMessageProxyForSchain.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Dmytro Stebaiev\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\nimport \\\"../IMessageProxy.sol\\\";\\nimport \\\"./IKeyStorage.sol\\\";\\nimport \\\"./ITokenManagerLinker.sol\\\";\\n\\ninterface IMessageProxyForSchain is IMessageProxy {\\n    struct OutgoingMessageData {\\n        bytes32 dstChainHash; // destination chain\\n        uint256 msgCounter; // message counter\\n        address srcContract; // origin\\n        address dstContract; // receiver\\n        bytes data; // payload\\n    }\\n\\n    function initialize(IKeyStorage blsKeyStorage, string memory schainName) external;\\n    function setMinimumReceiverBalance(uint256 balance) external;\\n    function topUpReceiverBalance(address payable receiver) external;\\n    function messageInProgress() external view returns (bool);\\n    function verifyOutgoingMessageData(OutgoingMessageData memory message) external view returns (bool);\\n    function verifySignature(bytes32 hashedMessage, Signature memory signature) external view returns (bool);\\n}\",\"keccak256\":\"0xb736e0bd90e27df9df69c183a33569d2086b55279a1d2819bef80a9bb88c75d5\",\"license\":\"AGPL-3.0-only\"},\"@skalenetwork/ima-interfaces/schain/ITokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   ITokenManager - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Dmytro Stebaiev\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\nimport \\\"../IMessageReceiver.sol\\\";\\n\\n\\ninterface ITokenManager is IMessageReceiver {\\n    function enableAutomaticDeploy() external;\\n    function addTokenManager(string calldata schainName, address newTokenManager) external;\\n    function removeTokenManager(string calldata schainName) external;\\n    function hasTokenManager(string calldata schainName) external view returns (bool);\\n}\",\"keccak256\":\"0x5814ca942db6bf68b2666e1190c6c2f369e0db246a81a89e5911e7a8bf200906\",\"license\":\"AGPL-3.0-only\"},\"@skalenetwork/ima-interfaces/schain/ITokenManagerLinker.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   ITokenManagerLinker - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Dmytro Stebaiev\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\nimport \\\"./IMessageProxyForSchain.sol\\\";\\nimport \\\"./ITokenManager.sol\\\";\\n\\n\\ninterface ITokenManagerLinker {\\n    function connectSchain(string calldata schainName) external;\\n    function disconnectSchain(string calldata schainName) external;\\n    function initialize(IMessageProxyForSchain newMessageProxyAddress, address linker) external;\\n    function registerTokenManager(ITokenManager newTokenManager) external;\\n    function removeTokenManager(ITokenManager tokenManagerAddress) external;\\n    function hasSchain(string calldata schainName) external view returns (bool connected);\\n    function hasTokenManager(address tokenManager) external view returns (bool);\\n}\",\"keccak256\":\"0xa22f6e919ad238a1e85de39c768620692e1b3f00f4ee895b95da3ce022ae6a8a\",\"license\":\"AGPL-3.0-only\"},\"@skalenetwork/ima-interfaces/schain/bls/IFieldOperations.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   IFieldOperations.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Dmytro Stebaiev\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\n\\ninterface IFieldOperations {\\n\\n    /**\\n     * @dev Structure that represents the field element { a + ib }\\n     */\\n    struct Fp2Point {\\n        uint a;\\n        uint b;\\n    }\\n\\n    /**\\n     * @dev Structure that represents an element of G2\\n     */\\n    struct G2Point {\\n        Fp2Point x;\\n        Fp2Point y;\\n    }\\n}\",\"keccak256\":\"0xc1c9fa7c776fbdda7f2999fcb8eae36c59e465989829727a5a8fc1de2781dea7\",\"license\":\"AGPL-3.0-only\"},\"contracts/MintManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@skalenetwork/ima-interfaces/schain/IMessageProxyForSchain.sol\\\";\\n\\ncontract MintManager is AccessControl {\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant MANAGER_RECIEVER_ROLE = keccak256(\\\"MANAGER_RECIEVER_ROLE\\\");\\n\\n    IMessageProxyForSchain public proxy;\\n\\n    mapping(bytes32 => address) public crossChainRecievers;\\n\\n    constructor() {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n        _grantRole(MANAGER_RECIEVER_ROLE, msg.sender);\\n\\n        proxy = IMessageProxyForSchain(\\n            0xd2AAa00100000000000000000000000000000000\\n        );\\n    }\\n\\n    function setCrossChainReceiver(bytes32 chainNameHash, address newReceiverAddress) external onlyRole(MANAGER_RECIEVER_ROLE) {\\n        crossChainRecievers[chainNameHash] = newReceiverAddress;\\n        /// Emit Event\\n    }\\n\\n\\n    function mintTo(address to, bytes32 chainNameHash, address destinationContractAddress) external onlyRole(MINTER_ROLE) {\\n        proxy.postOutgoingMessage(\\n            chainNameHash,\\n            crossChainRecievers[chainNameHash],\\n            abi.encode(\\n                0x0,\\n                to,\\n                destinationContractAddress\\n            )\\n        );\\n    }\\n\\n    function mintTo(address to, bytes32 chainNameHash, address destinationContractAddress, uint256 tokenId) external onlyRole(MINTER_ROLE) {\\n        proxy.postOutgoingMessage(\\n            chainNameHash,\\n            crossChainRecievers[chainNameHash],\\n            abi.encode(\\n                0x01,\\n                to,\\n                destinationContractAddress,\\n                tokenId\\n            )\\n        );\\n    }\\n    \\n    /** ERC1155 -> Specify How many **/\\n    function mintTo(address to, bytes32 chainNameHash, address destinationContractAddress, uint256 tokenId, uint256 amount) external onlyRole(MINTER_ROLE) {\\n        proxy.postOutgoingMessage(\\n            chainNameHash,\\n            crossChainRecievers[chainNameHash],\\n            abi.encode(\\n                0x02,\\n                to,\\n                destinationContractAddress,\\n                tokenId,\\n                amount\\n            )\\n        );\\n    }\\n}\\n\\n    // function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual override {\\n    //     if (rorrimNFTAddress == address(0)) revert RorrimAddressNotSet();\\n    //     super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n    // }\\n// }\\n\\n    // function _afterTokenTransfer(\\n    //     address from,\\n    //     address to,\\n    //     uint256 firstTokenId,\\n    //     uint256 batchSize\\n    // ) internal virtual override {\\n    //     super._afterTokenTransfer(from, to, firstTokenId, batchSize);\\n    //     if (from == address(0)) {\\n    //         proxy.postOutgoingMessage(\\n    //             destinationChainHash,\\n    //             rorrimNFTAddress,\\n    //             abi.encode(\\n    //                 \\\"mint\\\",\\n    //                 abi.encode(MintNotice({to: to, tokenId: firstTokenId}))\\n    //             )\\n    //         );\\n    //     } else {\\n    //         proxy.postOutgoingMessage(\\n    //             destinationChainHash,\\n    //             rorrimNFTAddress,\\n    //             abi.encode(\\n    //                 \\\"transfer\\\",\\n    //                 abi.encode(TransferNotice({to: to, tokenId: firstTokenId}))\\n    //             )\\n    //         );\\n    //     }\\n    // }\\n// }\\n\",\"keccak256\":\"0x560a266ae1587fc8c371026aec6bc4dc79322f9f0b1b559d2e837063a5062a0e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000276000801b33620000e660201b60201c565b620000597f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620000e660201b60201c565b6200008b7f28ef3adc5b20d69ab84ebe1e2f71d43bc6c9e6acb4a291daa08672fad7942e6c33620000e660201b60201c565b73d2aaa00100000000000000000000000000000000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000249565b620000f88282620001d760201b60201c565b620001d357600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001786200024160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6118b680620002596000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806386be49bb11610097578063cc9ab02311610066578063cc9ab02314610280578063d53913931461029e578063d547741f146102bc578063ec556889146102d8576100f5565b806386be49bb146101fa57806391d1485414610216578063a217fddf14610246578063a838f6b414610264576100f5565b806336568abe116100d357806336568abe146101765780634646b5fd1461019257806353357ff8146101ae578063750275e1146101de576100f5565b806301ffc9a7146100fa578063248a9ca31461012a5780632f2ff15d1461015a575b600080fd5b610114600480360381019061010f9190610eca565b6102f6565b6040516101219190610f12565b60405180910390f35b610144600480360381019061013f9190610f63565b610370565b6040516101519190610f9f565b60405180910390f35b610174600480360381019061016f9190611018565b61038f565b005b610190600480360381019061018b9190611018565b6103b0565b005b6101ac60048036038101906101a79190611058565b610433565b005b6101c860048036038101906101c39190610f63565b61054b565b6040516101d591906110ba565b60405180910390f35b6101f860048036038101906101f3919061110b565b61057e565b005b610214600480360381019061020f9190611018565b610699565b005b610230600480360381019061022b9190611018565b61071a565b60405161023d9190610f12565b60405180910390f35b61024e610784565b60405161025b9190610f9f565b60405180910390f35b61027e60048036038101906102799190611172565b61078b565b005b6102886108a9565b6040516102959190610f9f565b60405180910390f35b6102a66108cd565b6040516102b39190610f9f565b60405180910390f35b6102d660048036038101906102d19190611018565b6108f1565b005b6102e0610912565b6040516102ed919061124c565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610369575061036882610938565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b61039882610370565b6103a1816109a2565b6103ab83836109b6565b505050565b6103b8610a96565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041c906112ea565b60405180910390fd5b61042f8282610a9e565b5050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661045d816109a2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166394489202846002600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600088876040516020016104e693929190611352565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161051393929190611419565b600060405180830381600087803b15801561052d57600080fd5b505af1158015610541573d6000803e3d6000fd5b5050505050505050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66105a8816109a2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166394489202856002600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600189888860405160200161063394939291906114a1565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161066093929190611419565b600060405180830381600087803b15801561067a57600080fd5b505af115801561068e573d6000803e3d6000fd5b505050505050505050565b7f28ef3adc5b20d69ab84ebe1e2f71d43bc6c9e6acb4a291daa08672fad7942e6c6106c3816109a2565b816002600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66107b5816109a2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166394489202866002600089815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028a898989604051602001610842959493929190611521565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161086f93929190611419565b600060405180830381600087803b15801561088957600080fd5b505af115801561089d573d6000803e3d6000fd5b50505050505050505050565b7f28ef3adc5b20d69ab84ebe1e2f71d43bc6c9e6acb4a291daa08672fad7942e6c81565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6108fa82610370565b610903816109a2565b61090d8383610a9e565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109b3816109ae610a96565b610b7f565b50565b6109c0828261071a565b610a9257600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610a37610a96565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b610aa8828261071a565b15610b7b57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610b20610a96565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b610b89828261071a565b610c0057610b9681610c04565b610ba48360001c6020610c31565b604051602001610bb5929190611653565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf791906116c6565b60405180910390fd5b5050565b6060610c2a8273ffffffffffffffffffffffffffffffffffffffff16601460ff16610c31565b9050919050565b606060006002836002610c449190611717565b610c4e9190611759565b67ffffffffffffffff811115610c6757610c6661178d565b5b6040519080825280601f01601f191660200182016040528015610c995781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610cd157610cd06117bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610d3557610d346117bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610d759190611717565b610d7f9190611759565b90505b6001811115610e1f577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610dc157610dc06117bc565b5b1a60f81b828281518110610dd857610dd76117bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610e18906117eb565b9050610d82565b5060008414610e63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5a90611860565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610ea781610e72565b8114610eb257600080fd5b50565b600081359050610ec481610e9e565b92915050565b600060208284031215610ee057610edf610e6d565b5b6000610eee84828501610eb5565b91505092915050565b60008115159050919050565b610f0c81610ef7565b82525050565b6000602082019050610f276000830184610f03565b92915050565b6000819050919050565b610f4081610f2d565b8114610f4b57600080fd5b50565b600081359050610f5d81610f37565b92915050565b600060208284031215610f7957610f78610e6d565b5b6000610f8784828501610f4e565b91505092915050565b610f9981610f2d565b82525050565b6000602082019050610fb46000830184610f90565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fe582610fba565b9050919050565b610ff581610fda565b811461100057600080fd5b50565b60008135905061101281610fec565b92915050565b6000806040838503121561102f5761102e610e6d565b5b600061103d85828601610f4e565b925050602061104e85828601611003565b9150509250929050565b60008060006060848603121561107157611070610e6d565b5b600061107f86828701611003565b935050602061109086828701610f4e565b92505060406110a186828701611003565b9150509250925092565b6110b481610fda565b82525050565b60006020820190506110cf60008301846110ab565b92915050565b6000819050919050565b6110e8816110d5565b81146110f357600080fd5b50565b600081359050611105816110df565b92915050565b6000806000806080858703121561112557611124610e6d565b5b600061113387828801611003565b945050602061114487828801610f4e565b935050604061115587828801611003565b9250506060611166878288016110f6565b91505092959194509250565b600080600080600060a0868803121561118e5761118d610e6d565b5b600061119c88828901611003565b95505060206111ad88828901610f4e565b94505060406111be88828901611003565b93505060606111cf888289016110f6565b92505060806111e0888289016110f6565b9150509295509295909350565b6000819050919050565b600061121261120d61120884610fba565b6111ed565b610fba565b9050919050565b6000611224826111f7565b9050919050565b600061123682611219565b9050919050565b6112468161122b565b82525050565b6000602082019050611261600083018461123d565b92915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006112d4602f83611267565b91506112df82611278565b604082019050919050565b60006020820190508181036000830152611303816112c7565b9050919050565b6000819050919050565b600060ff82169050919050565b600061133c6113376113328461130a565b6111ed565b611314565b9050919050565b61134c81611321565b82525050565b60006060820190506113676000830186611343565b61137460208301856110ab565b61138160408301846110ab565b949350505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113c35780820151818401526020810190506113a8565b60008484015250505050565b6000601f19601f8301169050919050565b60006113eb82611389565b6113f58185611394565b93506114058185602086016113a5565b61140e816113cf565b840191505092915050565b600060608201905061142e6000830186610f90565b61143b60208301856110ab565b818103604083015261144d81846113e0565b9050949350505050565b6000819050919050565b600061147c61147761147284611457565b6111ed565b611314565b9050919050565b61148c81611461565b82525050565b61149b816110d5565b82525050565b60006080820190506114b66000830187611483565b6114c360208301866110ab565b6114d060408301856110ab565b6114dd6060830184611492565b95945050505050565b6000819050919050565b600061150b611506611501846114e6565b6111ed565b611314565b9050919050565b61151b816114f0565b82525050565b600060a0820190506115366000830188611512565b61154360208301876110ab565b61155060408301866110ab565b61155d6060830185611492565b61156a6080830184611492565b9695505050505050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006115b5601783611574565b91506115c08261157f565b601782019050919050565b600081519050919050565b60006115e1826115cb565b6115eb8185611574565b93506115fb8185602086016113a5565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061163d601183611574565b915061164882611607565b601182019050919050565b600061165e826115a8565b915061166a82856115d6565b915061167582611630565b915061168182846115d6565b91508190509392505050565b6000611698826115cb565b6116a28185611267565b93506116b28185602086016113a5565b6116bb816113cf565b840191505092915050565b600060208201905081810360008301526116e0818461168d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611722826110d5565b915061172d836110d5565b925082820261173b816110d5565b91508282048414831517611752576117516116e8565b5b5092915050565b6000611764826110d5565b915061176f836110d5565b9250828201905080821115611787576117866116e8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006117f6826110d5565b915060008203611809576118086116e8565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061184a602083611267565b915061185582611814565b602082019050919050565b600060208201905081810360008301526118798161183d565b905091905056fea2646970667358221220bc9bbb7897e0e3ddf8b29dc00079ec0776b3ae6788408a2fd015287b1708bac364736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806386be49bb11610097578063cc9ab02311610066578063cc9ab02314610280578063d53913931461029e578063d547741f146102bc578063ec556889146102d8576100f5565b806386be49bb146101fa57806391d1485414610216578063a217fddf14610246578063a838f6b414610264576100f5565b806336568abe116100d357806336568abe146101765780634646b5fd1461019257806353357ff8146101ae578063750275e1146101de576100f5565b806301ffc9a7146100fa578063248a9ca31461012a5780632f2ff15d1461015a575b600080fd5b610114600480360381019061010f9190610eca565b6102f6565b6040516101219190610f12565b60405180910390f35b610144600480360381019061013f9190610f63565b610370565b6040516101519190610f9f565b60405180910390f35b610174600480360381019061016f9190611018565b61038f565b005b610190600480360381019061018b9190611018565b6103b0565b005b6101ac60048036038101906101a79190611058565b610433565b005b6101c860048036038101906101c39190610f63565b61054b565b6040516101d591906110ba565b60405180910390f35b6101f860048036038101906101f3919061110b565b61057e565b005b610214600480360381019061020f9190611018565b610699565b005b610230600480360381019061022b9190611018565b61071a565b60405161023d9190610f12565b60405180910390f35b61024e610784565b60405161025b9190610f9f565b60405180910390f35b61027e60048036038101906102799190611172565b61078b565b005b6102886108a9565b6040516102959190610f9f565b60405180910390f35b6102a66108cd565b6040516102b39190610f9f565b60405180910390f35b6102d660048036038101906102d19190611018565b6108f1565b005b6102e0610912565b6040516102ed919061124c565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610369575061036882610938565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b61039882610370565b6103a1816109a2565b6103ab83836109b6565b505050565b6103b8610a96565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041c906112ea565b60405180910390fd5b61042f8282610a9e565b5050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661045d816109a2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166394489202846002600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600088876040516020016104e693929190611352565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161051393929190611419565b600060405180830381600087803b15801561052d57600080fd5b505af1158015610541573d6000803e3d6000fd5b5050505050505050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66105a8816109a2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166394489202856002600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600189888860405160200161063394939291906114a1565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161066093929190611419565b600060405180830381600087803b15801561067a57600080fd5b505af115801561068e573d6000803e3d6000fd5b505050505050505050565b7f28ef3adc5b20d69ab84ebe1e2f71d43bc6c9e6acb4a291daa08672fad7942e6c6106c3816109a2565b816002600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66107b5816109a2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166394489202866002600089815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028a898989604051602001610842959493929190611521565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161086f93929190611419565b600060405180830381600087803b15801561088957600080fd5b505af115801561089d573d6000803e3d6000fd5b50505050505050505050565b7f28ef3adc5b20d69ab84ebe1e2f71d43bc6c9e6acb4a291daa08672fad7942e6c81565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6108fa82610370565b610903816109a2565b61090d8383610a9e565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109b3816109ae610a96565b610b7f565b50565b6109c0828261071a565b610a9257600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610a37610a96565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b610aa8828261071a565b15610b7b57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610b20610a96565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b610b89828261071a565b610c0057610b9681610c04565b610ba48360001c6020610c31565b604051602001610bb5929190611653565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf791906116c6565b60405180910390fd5b5050565b6060610c2a8273ffffffffffffffffffffffffffffffffffffffff16601460ff16610c31565b9050919050565b606060006002836002610c449190611717565b610c4e9190611759565b67ffffffffffffffff811115610c6757610c6661178d565b5b6040519080825280601f01601f191660200182016040528015610c995781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610cd157610cd06117bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610d3557610d346117bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610d759190611717565b610d7f9190611759565b90505b6001811115610e1f577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610dc157610dc06117bc565b5b1a60f81b828281518110610dd857610dd76117bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610e18906117eb565b9050610d82565b5060008414610e63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5a90611860565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610ea781610e72565b8114610eb257600080fd5b50565b600081359050610ec481610e9e565b92915050565b600060208284031215610ee057610edf610e6d565b5b6000610eee84828501610eb5565b91505092915050565b60008115159050919050565b610f0c81610ef7565b82525050565b6000602082019050610f276000830184610f03565b92915050565b6000819050919050565b610f4081610f2d565b8114610f4b57600080fd5b50565b600081359050610f5d81610f37565b92915050565b600060208284031215610f7957610f78610e6d565b5b6000610f8784828501610f4e565b91505092915050565b610f9981610f2d565b82525050565b6000602082019050610fb46000830184610f90565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fe582610fba565b9050919050565b610ff581610fda565b811461100057600080fd5b50565b60008135905061101281610fec565b92915050565b6000806040838503121561102f5761102e610e6d565b5b600061103d85828601610f4e565b925050602061104e85828601611003565b9150509250929050565b60008060006060848603121561107157611070610e6d565b5b600061107f86828701611003565b935050602061109086828701610f4e565b92505060406110a186828701611003565b9150509250925092565b6110b481610fda565b82525050565b60006020820190506110cf60008301846110ab565b92915050565b6000819050919050565b6110e8816110d5565b81146110f357600080fd5b50565b600081359050611105816110df565b92915050565b6000806000806080858703121561112557611124610e6d565b5b600061113387828801611003565b945050602061114487828801610f4e565b935050604061115587828801611003565b9250506060611166878288016110f6565b91505092959194509250565b600080600080600060a0868803121561118e5761118d610e6d565b5b600061119c88828901611003565b95505060206111ad88828901610f4e565b94505060406111be88828901611003565b93505060606111cf888289016110f6565b92505060806111e0888289016110f6565b9150509295509295909350565b6000819050919050565b600061121261120d61120884610fba565b6111ed565b610fba565b9050919050565b6000611224826111f7565b9050919050565b600061123682611219565b9050919050565b6112468161122b565b82525050565b6000602082019050611261600083018461123d565b92915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006112d4602f83611267565b91506112df82611278565b604082019050919050565b60006020820190508181036000830152611303816112c7565b9050919050565b6000819050919050565b600060ff82169050919050565b600061133c6113376113328461130a565b6111ed565b611314565b9050919050565b61134c81611321565b82525050565b60006060820190506113676000830186611343565b61137460208301856110ab565b61138160408301846110ab565b949350505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113c35780820151818401526020810190506113a8565b60008484015250505050565b6000601f19601f8301169050919050565b60006113eb82611389565b6113f58185611394565b93506114058185602086016113a5565b61140e816113cf565b840191505092915050565b600060608201905061142e6000830186610f90565b61143b60208301856110ab565b818103604083015261144d81846113e0565b9050949350505050565b6000819050919050565b600061147c61147761147284611457565b6111ed565b611314565b9050919050565b61148c81611461565b82525050565b61149b816110d5565b82525050565b60006080820190506114b66000830187611483565b6114c360208301866110ab565b6114d060408301856110ab565b6114dd6060830184611492565b95945050505050565b6000819050919050565b600061150b611506611501846114e6565b6111ed565b611314565b9050919050565b61151b816114f0565b82525050565b600060a0820190506115366000830188611512565b61154360208301876110ab565b61155060408301866110ab565b61155d6060830185611492565b61156a6080830184611492565b9695505050505050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006115b5601783611574565b91506115c08261157f565b601782019050919050565b600081519050919050565b60006115e1826115cb565b6115eb8185611574565b93506115fb8185602086016113a5565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061163d601183611574565b915061164882611607565b601182019050919050565b600061165e826115a8565b915061166a82856115d6565b915061167582611630565b915061168182846115d6565b91508190509392505050565b6000611698826115cb565b6116a28185611267565b93506116b28185602086016113a5565b6116bb816113cf565b840191505092915050565b600060208201905081810360008301526116e0818461168d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611722826110d5565b915061172d836110d5565b925082820261173b816110d5565b91508282048414831517611752576117516116e8565b5b5092915050565b6000611764826110d5565b915061176f836110d5565b9250828201905080821115611787576117866116e8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006117f6826110d5565b915060008203611809576118086116e8565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061184a602083611267565b915061185582611814565b602082019050919050565b600060208201905081810360008301526118798161183d565b905091905056fea2646970667358221220bc9bbb7897e0e3ddf8b29dc00079ec0776b3ae6788408a2fd015287b1708bac364736f6c63430008130033",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mintTo(address,bytes32,address,uint256,uint256)": {
        "notice": "ERC1155 -> Specify How many *"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/MintManager.sol:MintManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1987,
        "contract": "contracts/MintManager.sol:MintManager",
        "label": "proxy",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMessageProxyForSchain)1875"
      },
      {
        "astId": 1991,
        "contract": "contracts/MintManager.sol:MintManager",
        "label": "crossChainRecievers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMessageProxyForSchain)1875": {
        "encoding": "inplace",
        "label": "contract IMessageProxyForSchain",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/MintManager.sol:MintManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/MintManager.sol:MintManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}